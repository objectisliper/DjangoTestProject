{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/guards/auth.guard.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/models/user.model.ts","webpack:///./src/app/register/register.component.css","webpack:///./src/app/register/register.component.html","webpack:///./src/app/register/register.component.ts","webpack:///./src/app/services/auth.service.ts","webpack:///./src/app/services/register.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["var map = {\n\t\"./pages/admin-manage/admin-manage.module\": [\n\t\t\"./src/app/pages/admin-manage/admin-manage.module.ts\",\n\t\t\"pages-admin-manage-admin-manage-module\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";\nmodule.exports = webpackAsyncContext;","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AuthGuard } from './guards/auth.guard';\nimport { LoginComponent } from './login/login.component';\nimport {RegisterComponent} from './register/register.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'admin',\n    pathMatch: 'full',\n    canActivate: [AuthGuard]\n  },\n  {\n    path: 'admin',\n    loadChildren: './pages/admin-manage/admin-manage.module#AdminManageModule',\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'login',\n    component: LoginComponent,\n    pathMatch: 'full',\n    data: {\n        breadcrumb: 'Login',\n        status: false\n    }\n  },\n  {\n    path: 'register',\n    component: RegisterComponent,\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'front-end';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './login/login.component';\nimport { AuthGuard } from './guards/auth.guard';\nimport { AuthService } from './services/auth.service';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CookieService } from 'ngx-cookie-service';\nimport { DataTablesModule } from 'angular-datatables';\nimport { RegisterComponent } from './register/register.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    RegisterComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule,\n    DataTablesModule,\n  ],\n  providers: [\n    AuthService,\n    AuthGuard,\n    CookieService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { Router, CanActivate } from '@angular/router';\nimport {AuthService} from \"../services/auth.service\";\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n\n    constructor(private router: Router, private authService: AuthService) { }\n\n    canActivate() {\n        if (this.authService.isAuth()) {\n            return true;\n        }\n\n        this.router.navigate(['/login']);\n        return false;\n    }\n}\n","module.exports = \".login-card h3 {\\n    margin-top: 10px;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGlCQUFpQjtDQUNwQiIsImZpbGUiOiJzcmMvYXBwL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubG9naW4tY2FyZCBoMyB7XG4gICAgbWFyZ2luLXRvcDogMTBweDtcbn1cbiJdfQ== */\"","module.exports = \"<section class=\\\"login p-fixed d-flex text-center common-img-bg justify-content-center\\\" style=\\\"height: 100vh;\\\">\\n    <div class=\\\"auth-fluid d-flex align-items-center\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-sm-12\\\">\\n                <div class=\\\"login-card card-body auth-body\\\">\\n                    <form class=\\\"md-float-material\\\" #loginForm=\\\"ngForm\\\" (ngSubmit)=\\\"submit()\\\"  (keyup)=\\\"userStartInput()\\\">\\n                        <div class=\\\"auth-box\\\">\\n                            <div class=\\\"row m-b-20\\\">\\n                                <div class=\\\"col-md-12\\\">\\n                                    <h3 class=\\\"text-center txt-primary\\\">Sign In</h3>\\n                                </div>\\n                            </div>\\n\\n                            <div class=\\\"input-group\\\">\\n                                <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Your Nicname\\\" name=\\\"name\\\"\\n                                       [(ngModel)]=\\\"user.name\\\" required>\\n                                <span class=\\\"md-line\\\"></span>\\n                            </div>\\n\\n                            <div class=\\\"input-group\\\">\\n                                <input type=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"Password\\\" name=\\\"password\\\"\\n                                       [(ngModel)]=\\\"user.password\\\" required>\\n                                <span class=\\\"md-line\\\"></span>\\n                            </div>\\n\\n                            <div class=\\\"col-md-12 form-txt-danger\\\" *ngIf=\\\"errorMessage\\\">\\n                                {{ errorMessage }}\\n                            </div>\\n\\n                            <div class=\\\"row m-t-30\\\">\\n                                <div class=\\\"col-md-12\\\">\\n                                    <button type=\\\"submit\\\" [disabled]=\\\"!loginForm.form.valid\\\"\\n                                            class=\\\"btn btn-primary btn-md btn-block waves-effect text-center m-b-20\\\"\\n                                    >\\n                                        Sign in\\n                                    </button>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"row m-t-30\\\">\\n                              <div class=\\\"col-md-12\\\">\\n                                <button routerLink=\\\"/register\\\" style=\\\"margin-top: 50px;\\\"\\n                                        class=\\\"btn btn-primary btn-md btn-block waves-effect text-center m-b-20\\\">\\n                                  Sign up\\n                                </button>\\n                              </div>\\n                            </div>\\n                        </div>\\n                    </form>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</section>\\n\"","import {Component, OnInit} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport {User} from \"../models/user.model\";\nimport {AuthService} from \"../services/auth.service\";\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  /** User instance */\n    public user: User;\n\n    /** Error message for showing in form */\n    public errorMessage: string;\n\n    /** Error message for unprocessed statuses */\n    public commonErrorMessage: string = 'Something went wrong. Please contact support.';\n\n    constructor(private authService: AuthService, private router: Router) {\n        this.user = new User();\n        this.user.name = '';\n        this.user.password = '';\n    }\n\n    ngOnInit() {\n        this.authService.logout();\n    }\n\n    /** Submit handler */\n    submit() {\n        this.authService.login(this.user.name, this.user.password).subscribe(\n            (result: boolean) => {\n                if (result === true) {\n                    let user = this.authService.getUser();\n                    let startRoute = '';\n                    this.router.navigate([startRoute]);\n                } else {\n                    this.errorMessage = this.commonErrorMessage;\n                }\n            },\n            (error: HttpErrorResponse) => {\n                switch (error.status) {\n                    case 400: return this.errorMessage = 'Incorrect username and password combination';\n                }\n\n                this.errorMessage = this.commonErrorMessage;\n                console.log(error);\n            }\n        );\n    }\n\n    /** Removing error message when user start input again */\n    userStartInput() {\n        this.errorMessage = '';\n    }\n\n}\n","export class User {\n    public id: string;\n    public name: string;\n    public email: string;\n    public password: string;\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3JlZ2lzdGVyL3JlZ2lzdGVyLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<section class=\\\"login p-fixed d-flex text-center common-img-bg justify-content-center\\\" style=\\\"height: 100vh;\\\">\\n  <div class=\\\"auth-fluid d-flex align-items-center\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-sm-12\\\">\\n        <div class=\\\"login-card card-body auth-body\\\">\\n          <form class=\\\"md-float-material\\\" #registerForm=\\\"ngForm\\\" (ngSubmit)=\\\"submit()\\\"  (keyup)=\\\"userStartInput()\\\">\\n            <div class=\\\"auth-box\\\">\\n              <div class=\\\"row m-b-20\\\">\\n                <div class=\\\"col-md-12\\\">\\n                  <h3 class=\\\"text-center txt-primary\\\">Sign up</h3>\\n                </div>\\n              </div>\\n\\n              <div class=\\\"input-group\\\">\\n                <input type=\\\"email\\\" class=\\\"form-control\\\" placeholder=\\\"Your Email Address\\\" name=\\\"email\\\"\\n                       [(ngModel)]=\\\"user.email\\\" required>\\n                <span class=\\\"md-line\\\"></span>\\n              </div>\\n\\n              <div class=\\\"input-group\\\">\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Your Nickname\\\" name=\\\"name\\\"\\n                       [(ngModel)]=\\\"user.name\\\" required>\\n                <span class=\\\"md-line\\\"></span>\\n              </div>\\n\\n              <div class=\\\"input-group\\\">\\n                <input type=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"Password\\\" name=\\\"password\\\"\\n                       [(ngModel)]=\\\"user.password\\\" required>\\n                <span class=\\\"md-line\\\"></span>\\n              </div>\\n\\n              <div class=\\\"col-md-12 form-txt-danger\\\" *ngIf=\\\"errorMessage\\\">\\n                {{ errorMessage }}\\n              </div>\\n\\n              <div class=\\\"row m-t-30\\\">\\n                <div class=\\\"col-md-12\\\">\\n                  <button type=\\\"submit\\\" [disabled]=\\\"!registerForm.form.valid\\\"\\n                          class=\\\"btn btn-primary btn-md btn-block waves-effect text-center m-b-20\\\"\\n                  >\\n                    Sign up\\n                  </button>\\n                </div>\\n              </div>\\n            </div>\\n          </form>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {User} from \"../models/user.model\";\nimport {AuthService} from '../services/auth.service';\nimport {Router} from '@angular/router';\nimport {HttpErrorResponse} from '@angular/common/http';\nimport {RegisterService} from '../services/register.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\n\nexport class RegisterComponent implements OnInit {\n\n  public user: User;\n\n  /** Error message for showing in form */\n  public errorMessage: string;\n\n  /** Error message for unprocessed statuses */\n  public commonErrorMessage: string = 'Something went wrong. Please contact support.';\n\n  constructor(private authService: AuthService, private router: Router, private registerService: RegisterService) {\n    this.user = new User();\n    this.user.name = '';\n    this.user.password = '';\n    this.user.email = '';\n  }\n\n  ngOnInit() {\n    this.authService.logout();\n  }\n\n  submit() {\n    this.registerService.register(this.user.name, this.user.password, this.user.email).subscribe(\n      response => this.authService.login(response['data']['username'], response['data']['password']).subscribe(\n        (result: boolean) => {\n          if (result === true) {\n            let user = this.authService.getUser();\n            let startRoute = '';\n            this.router.navigate([startRoute]);\n          } else {\n            this.errorMessage = this.commonErrorMessage;\n          }\n        },\n        (error: HttpErrorResponse) => {\n          switch (error.status) {\n            case 400: return this.errorMessage = 'Incorrect username and password combination';\n          }\n\n          this.errorMessage = this.commonErrorMessage;\n        }\n    ), (error: HttpErrorResponse) => {\n        switch (error.status) {\n          case 400: return this.errorMessage = 'Something went wrong, maybe such user already exist?';\n          case 500: return this.errorMessage = 'Something went wrong, maybe such user already exist?';\n        }\n\n        this.errorMessage = this.commonErrorMessage;\n      });\n  }\n\n  /** Removing error message when user start input again */\n  userStartInput() {\n    this.errorMessage = '';\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport {User} from \"../models/user.model\";\nimport { JwtHelperService } from \"@auth0/angular-jwt\";\nimport {map} from 'rxjs/operators';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Injectable()\nexport class AuthService {\n    private jwtHelper: JwtHelperService;\n\n    constructor(private http: HttpClient, private cookieService: CookieService) {\n        this.jwtHelper = new JwtHelperService();\n    }\n\n    /**\n     * Login\n     * @returns {Observable<boolean>}\n     */\n    public login(username: string, password: string): Observable<boolean> {\n        let options = {\n            headers: new HttpHeaders({ 'Content-Type': 'application/json',\n              'X-CSRFToken': this.cookieService.get('csrftoken') })\n        };\n\n        let body = JSON.stringify({username: username, password: password});\n\n        return this.http.post('/api/login', body, options)\n          .pipe( map(response => {\n                if (response['token']) {\n                    localStorage.setItem('token', response['token']);\n                    return true;\n                }\n\n                return false;\n            })\n          );\n    }\n\n    /**\n     * Logout\n     */\n    public logout(): void {\n        localStorage.removeItem('token');\n    }\n\n    /**\n     * Add auth header\n     *\n     * @param httpHeaders {HttpHeaders}\n     * @returns {HttpHeaders}\n     */\n    public static addAuthTokenToHeaders(httpHeaders: HttpHeaders): HttpHeaders {\n        return httpHeaders.set('Authorization', 'JWT ' + localStorage.getItem('token'));\n    }\n\n    /**\n     * Get auth token\n     *\n     * @returns {string | null}\n     */\n    public static getToken() {\n        return localStorage.getItem('token');\n    }\n\n    /**\n     * Check is user authenticated\n     *\n     * @returns {boolean}\n     */\n    isAuth(): boolean {\n        return !this.jwtHelper.isTokenExpired(localStorage.getItem('token'));\n    }\n\n    /**\n     * Get User instance filled by decoded data from token\n     * @returns {User}\n     */\n    getUser(): User {\n        let decodedToken = this.jwtHelper.decodeToken(localStorage.getItem('token'));\n\n        let user = new User();\n\n        if (decodedToken) {\n            user.name = 'username' in decodedToken ? String(decodedToken.username) : '';\n        }\n\n        return user;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {JwtHelperService} from '@auth0/angular-jwt';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {CookieService} from 'ngx-cookie-service';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegisterService {\n  private jwtHelper: JwtHelperService;\n\n  constructor(private http: HttpClient, private cookieService: CookieService) {\n    this.jwtHelper = new JwtHelperService();\n  }\n\n  public register(username: string, password: string, email: string): Observable<any> {\n    const options = {\n      headers: new HttpHeaders({ 'Content-Type': 'application/json',\n        'X-CSRFToken': this.cookieService.get('csrftoken') })\n    };\n\n    const body = JSON.stringify({username: username, password: password, email: email});\n\n    return this.http.post('/api/user', body, options)\n      .pipe( map(response => {\n          return response;\n        })\n      );\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}